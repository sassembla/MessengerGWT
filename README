This is library for messaging in GWT that using HTML5-message.
Connect local No-relational-objects asynchronously.
Without special setting.


SAMPLE CODE:
//////////////////////////////////////////////////////////////////////////
public class Foo implements MessengerGWTInterface {
	MessengerGWTImplement messenger;
	
	
	public Foo (String name) {
		messenger = new MessengerGWTImplement("fooName", this);
		messenger.call(messenger.getName(), "fooCommand", messenger.tagValue("fooKey", "fooValue"));
	}
	
	
	@Override
	public void receiveCenter(String message) {
		Window.alert("message_"+message);
	}
}
//////////////////////////////////////////////////////////////////////////


VERSION:0.5.0 (alpha release)


GOAL:
	Connect each client without GWT-RPC.



HOT TO USE:
	0.Download project.

	1.Copy 3 package to your source folder in your GWT-project.
	"com.kissaki.client.MessengerGWTCore"
		- Core module.

	"com.kissaki.client.subFrame.debug"
		- for System.out.println (& remote debugging)

	"com.kissaki.client.uuidGenerator
		- for Create uuid in each messenger-instance. 
		

	2.In your class, add implement interface "MessengerGWTInterface".

	3.Implement "public void receiveCenter(String message)" method at same class.

	4.Set "MessengerGWTImplement" instance in same class.
	e. g. 
		private MessengerGWTImplement messenger;

	5.Initialize "messenger"
	e. g.
		messenger = new MessengerGWTImplement("myName", this);

	6.Make call
	e. g.
		messenger.call("myName", "Something happening");

	7.The message will appear into the method "receiveCenter".
	


	If there are meny class that has self-messenger, they can contact each other.
		When you call "yourName" and then there is some messenger named "yourName",
		The message will appear in the "receiveCenter" method of"yourName".


MECHANIZM IN DETAIL:
now on writing.


LICENCE:GNU GPL